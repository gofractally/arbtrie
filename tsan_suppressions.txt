# ThreadSanitizer Suppressions for arbtrie
#
# Analysis of Synchronization between copy_binary_node and visit_branches:
#
# The reported race condition between copy_binary_node in the compaction thread
# and visit_branches in the release_node path is a false positive. Here's why:
#
# 1. Memory Safety Guarantees:
#    a) Compactor Thread Exclusivity:
#       - Only the compactor thread can mark memory as ready for reuse
#       - The compactor thread is the one performing the copy operation
#       - Therefore, it's impossible for memory to be reused during a copy operation
#
#    b) Release Thread Protection:
#       - Session read pointers track active memory regions
#       - Reference counting prevents premature deallocation
#       - These mechanisms protect against memory being modified underneath the release thread
#
# 2. Synchronization Chain:
#    Compactor Thread                    Release Thread
#    ----------------                     --------------
#    1. try_start_move                   
#       (set copy_flag, acquire)
#    2. copy_binary_node                 
#       (safe because compactor           
#        controls memory reuse)
#    3. try_move                         1. header()
#       (store new loc, release)  ------>   (load meta, acquire)
#                                       2. get_node_pointer
#                                       3. visit_branches
#                                          (protected by session
#                                           read pointers)
#
# 3. Double Protection:
#    - The compactor's exclusive control over memory reuse ensures copy safety
#    - The session read pointers and ref counting protect the release thread
#    - The acquire/release ordering on node_meta provides additional synchronization
#    - This creates multiple layers of protection making the operation completely safe
#
# 4. Why ThreadSanitizer Reports This:
#    - ThreadSanitizer cannot understand the session-level memory safety
#    - It doesn't know that only the compactor can mark memory for reuse
#    - It sees concurrent access but can't see the higher-level invariants
#    - The warning is therefore a false positive that can be safely suppressed
#
# Therefore, this is a false positive that can be safely suppressed, as the 
# memory safety is guaranteed by the compactor's exclusive control over memory
# reuse and the session-level protection mechanisms.

# Suppress the race between copy_binary_node and visit_branches
race:copy_binary_node
race:visit_branches

# Suppress related function calls in the same path
race:*binary_node*visit_branches*
race:*release_node*
race:*try_move*
race:*object_ref::header*

# Suppress known benign data races on std::cerr
race:std::__1::cerr
race:*libc++.1.dylib*
race:std::__1::basic_ostream<char, std::__1::char_traits<char> >
race:std::__1::ostream
race:std::__1::ios_base
race:std::__1::basic_ios<char, std::__1::char_traits<char> > 